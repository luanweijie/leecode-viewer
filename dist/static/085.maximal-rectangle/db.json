{"java":"public class Solution {\r\n    public int areaOfHistogram (int[] heights){\r\n        Stack<Integer> st = new Stack<Integer>();\r\n        int[] h = Arrays.copyOf(heights,heights.length+1);\r\n        int max = 0;\r\n        for(int i = 0;i < h.length;i++){\r\n            if(st.empty() || h[i] >= h[st.peek()]){\r\n                st.push(i);\r\n            }else{\r\n                while(!st.empty() && h[i] < h[st.peek()]){\r\n                    int top = st.pop();\r\n                    int left = st.empty()?-1:st.peek();\r\n                    int area = h[top] * (i -1 - left);\r\n                    if(area > max){\r\n                        max = area;\r\n                    }\r\n                }\r\n                st.push(i);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n    public int maximalRectangle(char[][] matrix) {\r\n        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\r\n            return 0;\r\n        }\r\n        int max = 0;\r\n        int[] h = new int[matrix[0].length];\r\n        for(int i = 0; i < matrix.length;i++){\r\n            for(int j = 0;j < matrix[0].length;j++){\r\n                if(matrix[i][j] == '1'){\r\n                    h[j]++;\r\n                }else{\r\n                    h[j] = 0;\r\n                }\r\n            }\r\n            int area = areaOfHistogram(h);\r\n            if(area > max){\r\n                max = area;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}"}