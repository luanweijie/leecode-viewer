{"java":"public class LRUCache {\r\n    public class Node{\r\n        Node prev;\r\n        Node next;\r\n        int value;\r\n        int key;\r\n        Node(Node p,Node n,int v,int k){\r\n            prev = p;\r\n            next = n;\r\n            value = v;\r\n            key = k;\r\n        }\r\n    }\r\n    Map<Integer,Node> map;\r\n    Node tail,front;\r\n    int cap;\r\n    int current;\r\n    public LRUCache(int capacity) {\r\n        map = new HashMap<>();\r\n        tail = new Node(null,null,0,0);\r\n        front = new Node(null,null,0,0);\r\n        front.next = tail;\r\n        tail.prev = front;\r\n        cap = capacity;\r\n        current = 0;\r\n    }\r\n    \r\n    public int get(int key) {\r\n        Node result = map.get(key);\r\n        if(result == null){\r\n            return -1;\r\n        }else{\r\n            result.prev.next = result.next;\r\n            result.next.prev = result.prev;\r\n            result.next = front.next;\r\n            result.next.prev = result;\r\n            front.next = result;\r\n            result.prev = front;\r\n            return result.value;\r\n        }\r\n    }\r\n    \r\n    public void set(int key, int value) {\r\n        Node result = map.get(key);\r\n        if(result == null){\r\n            result = new Node(null,null,value,key);\r\n            if(current == cap){\r\n                map.remove(tail.prev.key);\r\n                tail.prev.prev.next = tail;\r\n                tail.prev = tail.prev.prev;\r\n            }else{\r\n                current++;\r\n            }\r\n            map.put(key,result);\r\n        }else{\r\n            result.value = value;\r\n            result.prev.next = result.next;\r\n            result.next.prev = result.prev;\r\n        }\r\n        result.next = front.next;\r\n        result.next.prev = result;\r\n        front.next = result;\r\n        result.prev = front;\r\n    }\r\n}"}