{"java":"public class Solution {\r\n    //比直接暴力法时间还要长 我也是日了狗了\r\n    // public int search(int[] nums, int target) {\r\n    //     if(nums.length < 1) return -1;\r\n    //     return ownSearch(nums,0,nums.length-1,target);\r\n    // }\r\n    // private int ownSearch(int[] nums,int startIndex,int endIndex,int target){\r\n    //     if(endIndex - startIndex < 2){\r\n    //         for(;startIndex <= endIndex && nums[startIndex] != target;startIndex++);\r\n    //         return startIndex > endIndex ? -1 : startIndex ;\r\n    //     }\r\n    //     int middle = (startIndex + endIndex)/2;\r\n    //     if(nums[middle] == target){\r\n    //         return middle;\r\n    //     }else{\r\n    //         if(nums[middle] < nums[startIndex] ){\r\n    //             //pivot 在middle和start之间;\r\n    //             if(nums[middle] < target && target <= nums[endIndex]){\r\n    //                 return binarySearch(nums,middle+1,endIndex,target);\r\n    //             }else{\r\n    //                 return ownSearch(nums,startIndex,middle-1,target);\r\n    //             }\r\n    //         } else{\r\n    //             //pivot 在middle和end之间;\r\n    //             if(nums[middle] > target && target >= nums[startIndex]){\r\n    //                 return binarySearch(nums,startIndex,middle-1,target);\r\n    //             }else{\r\n    //                 return ownSearch(nums,middle+1,endIndex,target);\r\n    //             }\r\n    //         }                \r\n    //     }\r\n    // }\r\n    // private int binarySearch(int[] nums,int startIndex,int endIndex,int target){\r\n    //     if(endIndex - startIndex < 2){\r\n    //         for(;startIndex <= endIndex && nums[startIndex] != target;startIndex++);\r\n    //         return startIndex > endIndex ? -1 : startIndex ;\r\n    //     }else{\r\n    //         int middle = (startIndex + endIndex)/2;\r\n    //         if(target == nums[middle]){\r\n    //             return middle;\r\n    //         }else if(target > nums[middle]){\r\n    //             return binarySearch(nums,middle+1,endIndex,target);\r\n    //         }else{\r\n    //             return binarySearch(nums,startIndex,middle-1,target);\r\n    //         }\r\n    //     }\r\n    // }\r\n    public int search(int[] A, int target) {  \r\n        int l = 0;  \r\n        int r = A.length - 1;  \r\n        while (l <= r) {  \r\n            int mid = (l + r) / 2;  \r\n            if (target == A[mid]) return mid;  \r\n            if (A[l] <= A[r]) {  \r\n                if (target < A[mid]) r = mid - 1;  \r\n                else l = mid + 1;  \r\n            } else if (A[l] <= A[mid]) {  \r\n                if (target > A[mid] || target < A[l]) l = mid + 1;  \r\n                else r = mid - 1;  \r\n            } else {  \r\n                if (target < A[mid] || target > A[r]) r = mid - 1;  \r\n                else l = mid + 1;  \r\n            }  \r\n        }  \r\n        return -1;  \r\n    } \r\n}"}