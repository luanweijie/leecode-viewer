{"java":"public class Solution {\r\n    public int[] singleNumber(int[] nums) {\r\n        //自己实在是想不出来\r\n        //看了别人的答案,OOOOOhhhh MY GOOOOD\r\n        \r\n        // 首先计算nums数组中所有数字的异或，记为xor\r\n\r\n        // 令lowbit = xor & -xor，lowbit的含义为xor从低位向高位，第一个非0位所对应的数字\r\n        \r\n        // 例如假设xor = 6（二进制：0110），则-xor为（二进制：1010，-6的补码，two's complement）\r\n        \r\n        // 则lowbit = 2（二进制：0010）\r\n        \r\n        // 根据异或运算的性质，“同0异1” (所以 a b两个数字在这一位一定不相同!!! 这思路给跪了!)\r\n        \r\n        // 记只出现一次的两个数字分别为a与b\r\n        \r\n        // 可知a & lowbit与b & lowbit的结果一定不同\r\n        \r\n        // 通过这种方式，即可将a与b拆分开来\r\n        \r\n        int[] res = new int[2];  \r\n        int result = nums[0];  \r\n        for(int i=1;i<nums.length;i++){  \r\n            result ^= nums[i];  \r\n        }  \r\n        res[0] = 0;  \r\n        res[1] = 0;  \r\n        int n = result & (~(result-1));  \r\n        for(int i=0;i<nums.length;i++){  \r\n            if((n & nums[i])!=0){  \r\n                res[0] = res[0] ^ nums[i];  \r\n            }else {  \r\n                res[1] = res[1] ^ nums[i];  \r\n            }  \r\n        }  \r\n        return res;\r\n    }\r\n}"}