{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    private ListNode merge2lists(ListNode l1, ListNode l2){\r\n        if(l1 == null) return l2;\r\n        if(l2 == null) return l1;\r\n        if(l1.val < l2.val){\r\n            l1.next = merge2lists(l1.next,l2);\r\n            return l1;\r\n        }else{\r\n            l2.next = merge2lists(l1,l2.next);\r\n            return l2;\r\n        }\r\n    }\r\n    public ListNode mergeKLists(ListNode[] lists) {\r\n        if(lists.length == 0) return null;\r\n        if(lists.length == 1) return lists[0];\r\n        return mergeLists(lists,0,lists.length-1);\r\n    }\r\n    private ListNode mergeLists(ListNode[] lists,int startIndex,int endIndex){\r\n        if(startIndex == endIndex || startIndex == endIndex -1){\r\n            lists[startIndex/2] = startIndex == endIndex? lists[startIndex]: merge2lists(lists[startIndex],lists[endIndex]);\r\n            return lists[startIndex/2];\r\n        }\r\n        for(int i = startIndex;i <= endIndex;i += 2){\r\n            int end = i+1 > endIndex? endIndex:i+1;\r\n            mergeLists(lists,i,end);\r\n        }\r\n        return mergeLists(lists,startIndex,endIndex/2);\r\n    }\r\n}"}