{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode sortList(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n        int len = 1;\r\n        ListNode runner = head;\r\n        while(runner.next != null && runner.next.next != null){\r\n            len += 2;\r\n            runner = runner.next.next;\r\n        }\r\n        if(runner.next != null) len++;\r\n        return sort(head,len);\r\n    }\r\n    public ListNode sort(ListNode head,int totalLen){\r\n        if(totalLen == 1) return head;\r\n        int len = (totalLen -1)/2;\r\n        ListNode runner = head;\r\n        for(int i = 0;i < len;i++) runner = runner.next;\r\n        ListNode secondPartHead = sort(runner.next,totalLen - len - 1);\r\n        runner.next = null;\r\n        ListNode firstPartHead = sort(head,len+1);\r\n        ListNode fakeHead = new ListNode(0);\r\n        runner = fakeHead;\r\n        while(secondPartHead != null && firstPartHead != null){\r\n            if(secondPartHead.val < firstPartHead.val){\r\n                runner.next = secondPartHead;\r\n                secondPartHead = secondPartHead.next;\r\n            }else{\r\n                runner.next = firstPartHead;\r\n                firstPartHead = firstPartHead.next;\r\n            }\r\n            runner = runner.next;\r\n        }\r\n        if(secondPartHead != null){\r\n            runner.next = secondPartHead;\r\n        }else{\r\n            runner.next = firstPartHead;\r\n        }\r\n        return fakeHead.next;\r\n    }\r\n}"}