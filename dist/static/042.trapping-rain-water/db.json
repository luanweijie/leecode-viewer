{"java":"public class Solution {\r\n    public int trap(int[] height) {\r\n        if(height.length < 3){\r\n            return 0;\r\n        }\r\n        int leftEdge = 0,left = 0,maxRightEdge=0;\r\n        boolean leftFound = false,bottomFound = false;\r\n        int area = 0;\r\n        int[][] rmq = new int[1][1];\r\n        if(height.length > 3){\r\n            rmq = rmq(height);\r\n        }\r\n        for(int i = 0;i < height.length;i++){\r\n            if(!leftFound){\r\n                if(height[i] >=leftEdge){\r\n                    left = i;\r\n                    leftEdge = height[i];\r\n                }else{\r\n                    leftFound = true;\r\n                }\r\n            }\r\n            if(leftFound){\r\n                if(!bottomFound){\r\n                    if(height[i] > height[i-1]){\r\n                        bottomFound = true;\r\n                    }\r\n                }\r\n                if(bottomFound){\r\n                    if(i == height.length-1){\r\n                        area += solveArea(height,left,i);\r\n                    }else if(height[i+1] < height[i] ){\r\n                        if(height[i] < leftEdge && findMaxWithRmq(rmq,i+1,height.length-1) > height[i]){\r\n                            bottomFound = false;\r\n                        }else{\r\n                            area += solveArea(height,left,i);\r\n                            left = i;\r\n                            leftEdge = height[i];\r\n                            bottomFound = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return area;\r\n    }\r\n    private int[][] rmq(int[] height){\r\n        int logLen = (int)(Math.log(height.length)/Math.log(2));\r\n        int[][] result = new int[logLen+1][height.length];\r\n        for(int i = 0;i < height.length;i++){\r\n            result[0][i] = height[i];\r\n        }\r\n        for(int j = 1;j <= logLen;j++){\r\n            for(int i = 0; i + (1 << j) - 1< height.length;i++){\r\n                result[j][i] = Math.max(result[j-1][i],result[j-1][i+(1<<j-1)]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    private int findMaxWithRmq(int[][]rmq,int start,int end){\r\n        int len = end - start + 1;\r\n        int logLen = (int)(Math.log(len)/Math.log(2));\r\n        return Math.max(rmq[logLen][start],rmq[logLen][end - (1 << logLen)+1]);\r\n    }\r\n    private int solveArea(int[] height,int start,int end){\r\n        int max = height[start] > height[end]?height[end]:height[start];\r\n        int area = 0;\r\n        for(int i = start+1;i < end;i++){\r\n            area += Math.max(max - height[i],0);\r\n        }\r\n        return area;\r\n    }\r\n}"}