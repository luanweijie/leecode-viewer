{"java":"/**\r\n * Definition for undirected graph.\r\n * class UndirectedGraphNode {\r\n *     int label;\r\n *     List<UndirectedGraphNode> neighbors;\r\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\r\n * };\r\n */\r\npublic class Solution {\r\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\r\n        if(node == null) return null;\r\n        HashMap<Integer,UndirectedGraphNode> map = new HashMap<>();\r\n        int start = node.label;\r\n        UndirectedGraphNode startNode = new UndirectedGraphNode(start);\r\n        map.put(start,startNode);\r\n        Stack<UndirectedGraphNode> st = new Stack<>();\r\n        st.push(node);\r\n        //bfs\r\n        while(!st.isEmpty()){\r\n            Stack<UndirectedGraphNode> curSt = new Stack<>();\r\n            while(!st.isEmpty()){\r\n                UndirectedGraphNode current = st.pop();\r\n                UndirectedGraphNode currentClone = map.get(current.label);\r\n                for(UndirectedGraphNode neighbor: current.neighbors){\r\n                    if(map.containsKey(neighbor.label)){\r\n                        currentClone.neighbors.add(map.get(neighbor.label));\r\n                    }else{\r\n                        UndirectedGraphNode neighborClone = new UndirectedGraphNode(neighbor.label);\r\n                        map.put(neighborClone.label,neighborClone);\r\n                        currentClone.neighbors.add(neighborClone);\r\n                        curSt.push(neighbor);\r\n                    }\r\n                }\r\n            }\r\n            st = curSt;\r\n        }\r\n        return map.get(start);\r\n    }\r\n}"}