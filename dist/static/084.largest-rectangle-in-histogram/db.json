{"java":"public class Solution {\r\n    // public int largestRectangleArea(int[] heights) {\r\n    //     if(heights==null || heights.length<1){\r\n    //         return 0;\r\n    //     }\r\n    //     int[][] rmq = rmq(heights);\r\n    //     int max = 0;\r\n    //     for(int i = 0;i < heights.length;i++){\r\n    //         for(int j = i;j< heights.length;j++){\r\n    //             int min = (j-i+1)*rmqSolve(rmq,i,j);\r\n    //             if(min > max){\r\n    //                 max = min;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return max;\r\n    // }\r\n    // public int[][] rmq(int[] heights){\r\n    //     int times = (int)(Math.log(heights.length)/Math.log(2));\r\n    //     int[][] result = new int[times+1][];\r\n    //     int pow = 1;\r\n    //     for(int i = 0;i < times+1;i++){\r\n    //         result[i] = new int[heights.length+1-pow];\r\n    //         for(int j = 0; j< heights.length+1-pow;j++){\r\n    //             if(i == 0){\r\n    //                 result[0][j] = heights[j];\r\n    //             }else{\r\n    //                 result[i][j] = Math.min(result[i-1][j],result[i-1][j+pow/2]);\r\n    //             }\r\n    //         }\r\n    //         pow *= 2;\r\n    //     }\r\n    //     return result;\r\n    // }\r\n    // public int rmqSolve(int[][] rmqMatrix,int start,int end){\r\n    //     int len = end - start +1;\r\n    //     int pow = (int)(Math.log(len)/Math.log(2));\r\n    //     return Math.min(rmqMatrix[pow][start],rmqMatrix[pow][end-(1 << pow)+1]);\r\n    // }\r\n    \r\n    \r\n    //单调栈的解法\r\n    private class Node{\r\n        int pos;\r\n        int height;\r\n        Node(int h,int p){\r\n            pos = p;\r\n            height = h;\r\n        }\r\n    }\r\n    public int largestRectangleArea(int[] heights) {\r\n        if(heights==null || heights.length<1){\r\n            return 0;\r\n        }\r\n        Stack<Node> st = new Stack<Node>();\r\n        st.push(new Node(0,-1));\r\n        int max = 0;\r\n        for(int i = 0;i < heights.length;i++){\r\n            if(heights[i] < st.peek().height){\r\n                while(st.size()>1 && st.peek().height > heights[i]){\r\n                    Node top = st.pop();\r\n                    int area = top.height * (i-1-st.peek().pos);\r\n                    if(area>max){\r\n                        max = area;\r\n                    }\r\n                }\r\n            }\r\n            st.push(new Node(heights[i],i));\r\n        }\r\n        if(st.size() > 1){\r\n            int most = st.peek().pos;\r\n            while(st.size() > 1){\r\n                Node top =  st.pop();\r\n                int area = top.height * (most - st.peek().pos);\r\n                if(area>max){\r\n                    max = area;\r\n                }\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}"}